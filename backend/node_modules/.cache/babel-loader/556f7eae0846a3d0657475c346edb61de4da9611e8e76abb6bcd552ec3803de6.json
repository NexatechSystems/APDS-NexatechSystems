{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hoque\\\\payments-portal\\\\src\\\\frontend\\\\Register.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport DOMPurify from 'dompurify'; // For XSS prevention\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Register = props => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [pass, setPass] = useState('');\n  const [name, setName] = useState('');\n  const handleSubmit = async e => {\n    var _document$cookie$spli;\n    e.preventDefault();\n\n    // Simple RegEx pattern for email validation\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n    if (!emailPattern.test(email)) {\n      alert('Please enter a valid email.');\n      return;\n    }\n    if (!passwordPattern.test(pass)) {\n      alert('Password must be at least 8 characters long and contain at least one number.');\n      return;\n    }\n\n    // Extract CSRF token from the cookie using a more reliable approach\n    const csrfToken = (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith('_csrf')) // Look for the _csrf cookie\n    ) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n    if (csrfToken) {\n      const tokenValue = csrfToken.split('=')[1]; // Extract the actual CSRF token\n      console.log(\"CSRF Token:\", tokenValue);\n\n      // Send the registration request with the CSRF token\n      const response = await fetch('http://localhost:3000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'CSRF-Token': tokenValue // Correctly send the token value in the header\n        },\n        credentials: 'include',\n        // Ensure cookies are included in the request\n        body: JSON.stringify({\n          email,\n          password: pass\n        })\n      });\n      const data = await response.text();\n      if (response.status === 201) {\n        alert('Registration successful!');\n        props.onFormSwitch('login');\n      } else {\n        alert('Registration failed. Please try again.');\n      }\n      console.log(data);\n    } else {\n      console.error(\"CSRF token not found in cookies\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"register-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Full Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: DOMPurify.sanitize(name) // Sanitize the input to prevent XSS\n        ,\n        onChange: e => setName(e.target.value),\n        name: \"name\",\n        id: \"name\",\n        placeholder: \"John Doe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: DOMPurify.sanitize(email) // Sanitize the input to prevent XSS\n        ,\n        onChange: e => setEmail(e.target.value),\n        type: \"email\",\n        placeholder: \"yourEmail@gmail.com\",\n        id: \"email\",\n        name: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: pass // No need for sanitization here\n        ,\n        onChange: e => setPass(e.target.value),\n        type: \"password\",\n        placeholder: \"***********\",\n        id: \"password\",\n        name: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"link-btn\",\n      onClick: () => props.onFormSwitch('login'),\n      children: \"Already have an account? Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"Yo59ICqucLVvm5xXewC2Cs0XSII=\");\n_c = Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","DOMPurify","jsxDEV","_jsxDEV","Register","props","_s","email","setEmail","pass","setPass","name","setName","handleSubmit","e","_document$cookie$spli","preventDefault","emailPattern","passwordPattern","test","alert","csrfToken","document","cookie","split","find","row","startsWith","tokenValue","console","log","response","fetch","method","headers","credentials","body","JSON","stringify","password","data","text","status","onFormSwitch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","value","sanitize","onChange","target","id","placeholder","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/hoque/payments-portal/src/frontend/Register.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport DOMPurify from 'dompurify';  // For XSS prevention\r\n\r\nexport const Register = (props) => {\r\n    const [email, setEmail] = useState('');\r\n    const [pass, setPass] = useState('');\r\n    const [name, setName] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Simple RegEx pattern for email validation\r\n        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        const passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\r\n\r\n        if (!emailPattern.test(email)) {\r\n            alert('Please enter a valid email.');\r\n            return;\r\n        }\r\n\r\n        if (!passwordPattern.test(pass)) {\r\n            alert('Password must be at least 8 characters long and contain at least one number.');\r\n            return;\r\n        }\r\n\r\n        // Extract CSRF token from the cookie using a more reliable approach\r\n        const csrfToken = document.cookie\r\n  .split('; ')\r\n  .find(row => row.startsWith('_csrf'))  // Look for the _csrf cookie\r\n  ?.split('=')[1];\r\n\r\n        if (csrfToken) {\r\n            const tokenValue = csrfToken.split('=')[1]; // Extract the actual CSRF token\r\n            console.log(\"CSRF Token:\", tokenValue);\r\n            \r\n            // Send the registration request with the CSRF token\r\n            const response = await fetch('http://localhost:3000/api/users/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'CSRF-Token': tokenValue,  // Correctly send the token value in the header\r\n                },\r\n                credentials: 'include', // Ensure cookies are included in the request\r\n                body: JSON.stringify({ email, password: pass }),\r\n            });\r\n\r\n            const data = await response.text();\r\n            if (response.status === 201) {\r\n                alert('Registration successful!');\r\n                props.onFormSwitch('login');\r\n            } else {\r\n                alert('Registration failed. Please try again.');\r\n            }\r\n            console.log(data);\r\n        } else {\r\n            console.error(\"CSRF token not found in cookies\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth-form-container\">\r\n            <h2>Register</h2>\r\n            <form className=\"register-form\" onSubmit={handleSubmit}>\r\n                <label htmlFor=\"name\">Full Name</label>\r\n                <input\r\n                    value={DOMPurify.sanitize(name)} // Sanitize the input to prevent XSS\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    placeholder=\"John Doe\"\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                    value={DOMPurify.sanitize(email)} // Sanitize the input to prevent XSS\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    type=\"email\"\r\n                    placeholder=\"yourEmail@gmail.com\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input\r\n                    value={pass} // No need for sanitization here\r\n                    onChange={(e) => setPass(e.target.value)}\r\n                    type=\"password\"\r\n                    placeholder=\"***********\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                />\r\n                <button type=\"submit\">Register</button>\r\n            </form>\r\n            <button className=\"link-btn\" onClick={() => props.onFormSwitch('login')}>\r\n                Already have an account? Log In\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}