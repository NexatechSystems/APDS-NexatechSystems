{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hoque\\\\payments-portal\\\\src\\\\frontend\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport DOMPurify from 'dompurify'; // For XSS prevention\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Login = props => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [pass, setPass] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Simple email validation using RegEx\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailPattern.test(email)) {\n      alert('Please enter a valid email.');\n      return;\n    }\n\n    // Extract CSRF token from the cookie using a more reliable approach\n    const csrfToken = document.cookie.split('; ').find(row => row.startsWith('_csrf'));\n    if (csrfToken) {\n      const tokenValue = csrfToken.split('=')[1];\n      console.log(\"CSRF Token:\", tokenValue);\n    } else {\n      console.error(\"CSRF token not found in cookies\");\n    }\n\n    // Log the CSRF token for debugging\n    console.log(\"CSRF Token:\", csrfToken);\n    const response = await fetch('http://localhost:3000/api/users/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'CSRF-Token': csrfToken // Include CSRF token in headers\n      },\n      credentials: 'include',\n      // Make sure cookies are included in the request\n      body: JSON.stringify({\n        email,\n        password: pass\n      })\n    });\n    const data = await response.text();\n    if (response.status === 200) {\n      alert('Login successful!');\n    } else {\n      alert('Invalid credentials. Please try again.');\n    }\n    console.log(data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: DOMPurify.sanitize(email) // Sanitize the input to prevent XSS\n        ,\n        onChange: e => setEmail(e.target.value),\n        type: \"email\",\n        placeholder: \"yourEmail@gmail.com\",\n        id: \"email\",\n        name: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: pass // No need for sanitization here\n        ,\n        onChange: e => setPass(e.target.value),\n        type: \"password\",\n        placeholder: \"***********\",\n        id: \"password\",\n        name: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"link-btn\",\n      onClick: () => props.onFormSwitch('register'),\n      children: \"Don't have an account? Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"0sNgnRe+UyXPZGg9IeRLussLKTE=\");\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","DOMPurify","jsxDEV","_jsxDEV","Login","props","_s","email","setEmail","pass","setPass","handleSubmit","e","preventDefault","emailPattern","test","alert","csrfToken","document","cookie","split","find","row","startsWith","tokenValue","console","log","error","response","fetch","method","headers","credentials","body","JSON","stringify","password","data","text","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","value","sanitize","onChange","target","type","placeholder","id","name","onClick","onFormSwitch","_c","$RefreshReg$"],"sources":["C:/Users/hoque/payments-portal/src/frontend/Login.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport DOMPurify from 'dompurify';  // For XSS prevention\r\n\r\nexport const Login = (props) => {\r\n    const [email, setEmail] = useState('');\r\n    const [pass, setPass] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Simple email validation using RegEx\r\n        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n        if (!emailPattern.test(email)) {\r\n            alert('Please enter a valid email.');\r\n            return;\r\n        }\r\n\r\n        // Extract CSRF token from the cookie using a more reliable approach\r\n        const csrfToken = document.cookie.split('; ').find(row => row.startsWith('_csrf'));\r\n\r\n        if (csrfToken) {\r\n            const tokenValue = csrfToken.split('=')[1];\r\n            console.log(\"CSRF Token:\", tokenValue);\r\n          } else {\r\n            console.error(\"CSRF token not found in cookies\");\r\n          }\r\n\r\n        // Log the CSRF token for debugging\r\n        console.log(\"CSRF Token:\", csrfToken);\r\n\r\n        const response = await fetch('http://localhost:3000/api/users/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'CSRF-Token': csrfToken // Include CSRF token in headers\r\n            },\r\n            credentials: 'include', // Make sure cookies are included in the request\r\n            body: JSON.stringify({ email, password: pass }),\r\n        });\r\n\r\n        const data = await response.text();\r\n        if (response.status === 200) {\r\n            alert('Login successful!');\r\n        } else {\r\n            alert('Invalid credentials. Please try again.');\r\n        }\r\n        console.log(data);\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth-form-container\">\r\n            <h2>Login</h2>\r\n            <form className=\"login-form\" onSubmit={handleSubmit}>\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                    value={DOMPurify.sanitize(email)} // Sanitize the input to prevent XSS\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    type=\"email\"\r\n                    placeholder=\"yourEmail@gmail.com\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input\r\n                    value={pass} // No need for sanitization here\r\n                    onChange={(e) => setPass(e.target.value)}\r\n                    type=\"password\"\r\n                    placeholder=\"***********\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                />\r\n                <button type=\"submit\">Log In</button>\r\n            </form>\r\n            <button className=\"link-btn\" onClick={() => props.onFormSwitch('register')}>\r\n                Don't have an account? Register\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}